#!/usr/bin/env node

/**
 * Module dependencies.
 */

var connect = require('connect')
  , exec = require('child_process').exec
  , fs = require('fs')
  , join = require('path').join
  , program = require('commander')
  , resolve = require('path').resolve
  , terraform = require('terraform')
  , url = require('url');

// CLI

program
  .version(require('../package.json').version)
  .usage('[options] [dir]')
  .option('-a, --auth <user>:<pass>', 'specify basic auth credentials')
  .option('-F, --format <fmt>', 'specify the log format string', 'dev')
  .option('-p, --port <port>', 'specify the port [3000]', Number, 3000)
  .option('-H, --hidden', 'enable hidden file serving')

  .option('-J, --no-jade', 'disable jade rendering')
  .option('    --no-ejs', 'disable ejs rendering')
  .option('    --no-markdown', 'disable markdown rendering')

  .option('    --no-less', 'disable less css rendering')
  .option('    --no-sass', 'disable sass/scss css rendering')
  .option('-S, --no-stylus', 'disable stylus rendering')

  .option('-C, --no-coffee', 'disable CoffeeScript rendering')

  .option('-I, --no-icons', 'disable icons')
  .option('-L, --no-logs', 'disable request logging')
  .option('-D, --no-dirs', 'disable directory serving')
  .option('-f, --favicon <path>', 'serve the given favicon')
  .option('-C, --cors', 'allows cross origin access serving')
  .option('    --compress', 'gzip or deflate the response')
  .option('    --exec <cmd>', 'execute command on each request')
  .parse(process.argv);

// path
var path = resolve(program.args.shift() || '.');
var terra = terraform.root(path);

// setup the server
var server = connect();

// basic auth

if (program.auth) {
  var user = program.auth.split(':')[0];
  var pass = program.auth.split(':')[1];
  if (!user || !pass) throw new Error('user and pass required');
  server.use(connect.basicAuth(user, pass));
}

// ignore favicon
server.use(connect.favicon(program.favicon));

// logger
if (program.logs) server.use(connect.logger(program.format));

// check if a url requests a html superset format
function isHtmlSuperset (url) {
  return url.match(/\.jade$/)
      || url.match(/\.ejs$/)
      || url.match(/\.md$/);
}

// handle HTML supersets
if (program.jade || program.ejs || program.markdown) {
  server.use(function (req, res, next) {
    if (!isHtmlSuperset(req.url)) return next();
    var path = url.parse(req.url).pathname.slice(1);
    terra.render(path, function (err, body) {
      if (err) throw err;
      res.setHeader('Content-Type', 'text/html');
      res.setHeader('Content-Length', Buffer.byteLength(body));
      res.end(body);
    });
  });
}

// check if a url requests a css superset format
function isCssSuperset (url) {
  return url.match(/\.less$/)
      || url.match(/\.sass$/)
      || url.match(/\.scss$/)
      || url.match(/\.styl$/);
}

// handle CSS supersets
if (program.less || program.sass || program.stylus) {
  server.use(function (req, res, next) {
    if (!isCssSuperset(req.url)) return next();
    var path = url.parse(req.url).pathname.slice(1);
    terra.render(path, function (err, body) {
      if (err) throw err;
      res.setHeader('Content-Type', 'text/css');
      res.setHeader('Content-Length', Buffer.byteLength(body));
      res.end(body);
    });
  });
}

// check if a url requests a js superset format
function isJsSuperset (url) {
  return url.match(/\.coffee$/);
}

// handle JavaScript supersets
if (program.coffee) {
  server.use(function (req, res, next) {
    if (!isJsSuperset(req.url)) return next();
    var path = url.parse(req.url).pathname.slice(1);
    terra.render(path, function (err, body) {
      if (err) throw err;
      res.setHeader('Content-Type', 'application/x-javascript');
      res.setHeader('Content-Length', Buffer.byteLength(body));
      res.end(body);
    });
  });
}

// CORS access for files
if (program.cors) {
  server.use(function(req, res, next){
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, Content-Length, X-Requested-With, Accept, x-csrf-token, origin');
    if ('OPTIONS' === req.method) return res.end();
    next();
  });
}

// compression
if (program.compress) {
  server.use(connect.compress());
}

// exec command
if (program.exec) {
  server.use(function (req, res, next){
    exec(program.exec, next);
  });
}

// static files
server.use(connect.static(path, { hidden: program.hidden }));

// directory serving

if (program.dirs) {
    server.use(connect.directory(path, {
      hidden: program.hidden
    , icons: program.icons
  }));
}

// start the server
server.listen(program.port, function () {
  console.log('\033[90mserving \033[36m%s\033[90m on port \033[96m%d\033[0m', path, program.port);
});
