#!/usr/bin/env node

/**
 * Module dependencies.
 */

var resolve = require('path').resolve
  , join = require('path').join
  , extName = require('path').extname
  , program = require('commander')
  , connect = require('connect')
  , stylus = require('stylus')
  , jade = require('jade')
  , less = require('less-middleware')
  , url = require('url')
  , fs = require('fs')
  , LiveReloadServer = require('tiny-lr')
  , gaze = require('gaze');

// CLI

program
  .version('1.3.0')
  .usage('[options] [dir]')
  .option('-F, --format <fmt>', 'specify the log format string', 'dev')
  .option('-p, --port <port>', 'specify the port [3000]', Number, 3000)
  .option('-H, --hidden', 'enable hidden file serving')
  .option('-S, --no-stylus', 'disable stylus rendering')
  .option('-J, --no-jade', 'disable jade rendering')
  .option('    --no-less', 'disable less css rendering')
  .option('-I, --no-icons', 'disable icons')
  .option('-L, --no-logs', 'disable request logging')
  .option('-D, --no-dirs', 'disable directory serving')
  .option('-f, --favicon <path>', 'serve the given favicon')
  .option('-C, --cors', 'allows cross origin access serving')
  .option('    --compress', 'gzip or deflate the response')
  .option('-R, --livereload', 'refresh your CSS (or page) with each save')
  .parse(process.argv);

// path
var path = resolve(program.args.shift() || '.');

// setup the server
var server = connect();

// ignore favicon
server.use(connect.favicon(program.favicon));

// logger
if (program.logs) server.use(connect.logger(program.format));

// convert .styl to .css to trick stylus.middleware
if (program.stylus) {
  server.use(function(req, res, next){
    req.url = req.url.replace(/\.styl$/, '.css');
    next();
  });
}

// jade
if (program.jade) {
  server.use(function(req, res, next){
    if (!req.url.match(/\.jade$/)) return next();
    var file = join(path, url.parse(req.url).pathname);
    fs.readFile(file, 'utf8', function(err, str){
      if (err) return next(err);
      try {
        var fn = jade.compile(str, { filename: file });
        str = fn();
        res.setHeader('Content-Type', 'text/html');
        res.setHeader('Content-Length', Buffer.byteLength(str));
        res.end(str);
      } catch (err) {
        next(err);
      }
    });
  });
}

// stylus
server.use(stylus.middleware({ src: path }));

// less
if (program.less) {
  server.use(less({ src: path }));
}

// CORS access for files
if (program.cors) {
  server.use(function(req, res, next){
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, Content-Length, X-Requested-With, Accept, x-csrf-token, origin');
    if ('OPTIONS' == req.method) return res.end();
    next();
  });
}

// compression
if (program.compress) {
  server.use(connect.compress());
}

// livereload
if (program.livereload) {
  var port = 35729;
  server.use(function(req, res, next){
    var getSnippet = function () {
      var snippet = [
        "<!-- livereload snippet -->",
        "<script>document.write('<script src=\"http://'",
        " + (location.host || 'localhost').split(':')[0]",
        " + ':" + port + "/livereload.js?snipver=1\"><\\/script>')",
        "</script>",
        ""
        ].join('\n');
      return snippet;
    };
    var write = res.write;
    var filepath = url.parse(req.url).pathname;
    filepath = filepath.slice(-1) === '/' ? filepath + 'index.html' : filepath;
    if (extName( filepath ) !== '.html') return next();
    res.write = function (string, encoding) {
      var body = string instanceof Buffer ? string.toString() : string;
      body = body.replace(/<\/body>/, function (w) {
        return getSnippet() + w;
      });
      if (string instanceof Buffer) {
        string = new Buffer(body);
      } else {
        string = body;
      }
      if (!this.headerSent) {
        this.setHeader('content-length', Buffer.byteLength(body));
        this._implicitHeader();
      }
      write.call(res, string, encoding);
    };
    next();
  });
  var lrServer = new LiveReloadServer();
  lrServer.listen(port);
  gaze(path + '/**/*', function(){
    this.on('all', function(event, filepath){
      lrServer.changed({
        body: {
          files: escape(filepath)
        }
      });
    });
  });
}

// static files
server.use(connect.static(path, { hidden: program.hidden }));

// directory serving

if (program.dirs) {
    server.use(connect.directory(path, {
      hidden: program.hidden
    , icons: program.icons
  }));
}

// start the server
server.listen(program.port, function () {
  console.log('\033[90mserving \033[36m%s\033[90m on port \033[96m%d\033[0m', path, program.port);
});

