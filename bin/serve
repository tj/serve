#!/usr/bin/env node

/**
 * Module dependencies.
 */

var resolve = require('path').resolve
  , join = require('path').join
  , program = require('commander')
  , connect = require('connect')
  , stylus = require('stylus')
  , jade = require('jade')
  , less = require('less-middleware')
  , url = require('url')
  , fs = require('fs')
  , http = require('http')

// CLI

program
  .version(require('../package.json').version)
  .usage('[options] [dir]')
  .option('-F, --format <fmt>', 'specify the log format string', 'dev')
  .option('-p, --port <port>', 'specify the port [3000]', Number, 3000)
  .option('-r, --retries <port>', 'specify the number of alternative ports to try', Number, 20)
  .option('-m, --middleware <a,b,c>', 'extra middleware to use', list, [])
  .option('-H, --hidden', 'enable hidden file serving')
  .option('-S, --no-stylus', 'disable stylus rendering')
  .option('-J, --no-jade', 'disable jade rendering')
  .option('    --no-less', 'disable less css rendering')
  .option('-I, --no-icons', 'disable icons')
  .option('-L, --no-logs', 'disable request logging')
  .option('-D, --no-dirs', 'disable directory serving')
  .option('-f, --favicon <path>', 'serve the given favicon')
  .option('-C, --cors', 'allows cross origin access serving')
  .parse(process.argv);

function list(arg){
  return arg.split(',')
}

// path
var path = resolve(program.args.shift() || '.');

// setup the app
var app = connect();

// ignore favicon
app.use(connect.favicon(program.favicon));

// logger
if (program.logs) app.use(connect.logger(program.format));

// extra middleware
program.middleware.forEach(function(mw){
  if (/^\./.test(mw)) mw = join(process.cwd(), mw)
  try {
    mw = require(mw)
  } catch (e) {
    throw new Error('unable to load "'+mw+'"')
  }
  app.use(mw)
})

// convert .styl to .css to trick stylus.middleware
if (program.stylus) {
  app.use(function(req, res, next){
    req.url = req.url.replace(/\.styl$/, '.css');
    next();
  });
}

// jade
if (program.jade) {
  app.use(function(req, res, next){
    if (!req.url.match(/\.jade$/)) return next();
    var file = join(path, url.parse(req.url).pathname);
    fs.readFile(file, 'utf8', function(err, str){
      if (err) return next(err);
      try {
        var fn = jade.compile(str, { filename: file });
        str = fn();
        res.setHeader('Content-Type', 'text/html');
        res.setHeader('Content-Length', Buffer.byteLength(str));
        res.end(str);
      } catch (err) {
        next(err);
      }
    });
  });
}

// stylus
app.use(stylus.middleware({ src: path }));

// less
if (program.less) {
  app.use(less({ src: path }));
}

// CORS access for files
if (program.cors) {
  app.use(function(req, res, next){
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, Content-Length, X-Requested-With, Accept, x-csrf-token, origin');
    if ('OPTIONS' == req.method) return res.end();
    next();
  });
}
// static files
app.use(connect.static(path, { hidden: program.hidden }));

// directory serving

if (program.dirs) {
    app.use(connect.directory(path, {
      hidden: program.hidden
    , icons: program.icons
  }));
}

var max = program.port + program.retries;

// start the server
function start(port){
  http.createServer(app)
    .on('error', function(e){
      if (e.message != 'listen EADDRINUSE') throw e;
      if (port == max) throw new Error('can\'t find a free port');
      console.log('\033[90mport \033[36m%d\033[90m is taken, trying \033[96m%d\033[0m', port, ++port);
      start(port);
    })
    .listen(port, function () {
      console.log('\033[90mserving \033[36m%s\033[90m on port \033[96m%d\033[0m', path, this.address().port);
    })
}

start(program.port);
